from typing import Annotated, List

from fastapi import APIRouter, Depends, Path, HTTPException, Query

from app.core.deps import get_user_service
from app.schemas.user import UserOut, UserCreate
from app.services.users import UserService

router = APIRouter()


@router.post("/users/", response_model=UserOut, tags=["Users üßò"])
async def create_user(user: UserCreate, service: UserService = Depends(get_user_service)):
    return await service.create_user(user)


@router.get("/users/{user_id}", response_model=UserOut, tags=["Users üßò"])
async def get_user_by_id(
        user_id: Annotated[
            int, Path(..., title="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
        service: UserService = Depends(get_user_service),
):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID."""
    user = await service.get_user_by_id(user_id)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return user


@router.get("/users/", response_model=List[UserOut], tags=["Users üßò"])
async def get_users(
        skip: Annotated[int, Query(ge=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")] = 0,
        limit: Annotated[int, Query(ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞")] = 10,
        service: UserService = Depends(get_user_service),
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    return await service.get_users(skip=skip, limit=limit)


@router.delete("/users/{user_id}", tags=["Users üßò"])
async def delete_user(
        user_id: Annotated[
            int, Path(..., title="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        ],
        service: UserService = Depends(get_user_service),
):
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID."""
    deleted = await service.delete_user(user_id)
    if not deleted:
        raise HTTPException(status_code=404, detail="User not found")
    return {"detail": "User deleted successfully"}


@router.patch("/users/{user_id}", response_model=UserOut, tags=["Users üßò"])
async def update_user_username(
        user_id: Annotated[
            int, Path(..., title="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
        username: Annotated[str, Query(..., max_length=50, description="–ù–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
        service: UserService = Depends(get_user_service),
):
    """–û–±–Ω–æ–≤–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = await service.get_user_by_id(user_id)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return await service.update_user(user_id, username=username)
