import pandas as pd
from surprise import Dataset, Reader, SVD
from surprise.model_selection import train_test_split

# === 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º
ratings_path = "dataset/ratings.csv"
movies_path = "dataset/movies.csv"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç—ã
ratings_df = pd.read_csv(ratings_path)
movies_df = pd.read_csv(movies_path)

# –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 500 —Ñ–∏–ª—å–º–æ–≤ –ø–æ movieId
top_movies = movies_df.head(500)["movieId"]
filtered_ratings = ratings_df[ratings_df["movieId"].isin(top_movies)]

# === 2. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç surprise ===
reader = Reader(rating_scale=(0.5, 5.0))
data = Dataset.load_from_df(filtered_ratings[["userId", "movieId", "rating"]], reader)
trainset, testset = train_test_split(data, test_size=0.2)

# === 3. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ ===
algo = SVD()
algo.fit(trainset)


# === 4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
def get_top_n(user_id, n=5):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö movieId –≤ –Ω–∞—à–µ–º —Å–∞–±—Å–µ—Ç–µ
    all_movie_ids = filtered_ratings["movieId"].unique()

    # –ò—â–µ–º —Ñ–∏–ª—å–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –æ—Ü–µ–Ω–∏–ª
    rated = filtered_ratings[filtered_ratings["userId"] == user_id]["movieId"].values
    unrated = [mid for mid in all_movie_ids if mid not in rated]

    # –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    predictions = [algo.predict(user_id, mid) for mid in unrated]
    predictions.sort(key=lambda x: x.est, reverse=True)

    top_n = predictions[:n]

    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤
    top_movie_ids = [pred.iid for pred in top_n]
    recommended_titles = movies_df[movies_df["movieId"].isin(top_movie_ids)]

    return recommended_titles[["movieId", "title"]]


# === –ü—Ä–∏–º–µ—Ä ===
user_id = 1
top_recommendations = get_top_n(user_id)
print(f"\nüé¨ –¢–æ–ø-5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
print(top_recommendations)
