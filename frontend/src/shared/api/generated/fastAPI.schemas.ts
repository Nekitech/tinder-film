/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
export interface HTTPValidationError {
  detail?: ValidationError[];
}

export interface LoginResponse {
  /** Status code of the response, e.g., 200 for success */
  code: number;
  /** Generated access token for the user */
  access_token: string;
}

export interface Recommendation {
  movie_id: number;
  title: string;
  predicted_rating: number;
}

export interface RecommendationResponse {
  user_id: number;
  recommendations: Recommendation[];
}

export interface UserCreate {
  email: string;
  username: string;
  password: string;
}

export interface UserLogin {
  /** Username */
  username: string;
  /** Password */
  password: string;
}

export interface UserOut {
  email: string;
  username: string;
  id: number;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export type RegisterRegisterPostParams = {
username: string;
password: string;
};

export type RefreshTokensRefreshPostParams = {
type?: RefreshTokensRefreshPostType;
optional?: boolean;
token: string;
csrf?: string | null;
location: RefreshTokensRefreshPostLocation;
};

export type RefreshTokensRefreshPostType = typeof RefreshTokensRefreshPostType[keyof typeof RefreshTokensRefreshPostType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RefreshTokensRefreshPostType = {
  access: 'access',
  refresh: 'refresh',
} as const;

export type RefreshTokensRefreshPostLocation = typeof RefreshTokensRefreshPostLocation[keyof typeof RefreshTokensRefreshPostLocation];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RefreshTokensRefreshPostLocation = {
  headers: 'headers',
  cookies: 'cookies',
  json: 'json',
  query: 'query',
} as const;

export type TrainRecommenderRecommenderTrainPostParams = {
limit?: number;
};

export type RecommendRecommenderRecommendationsUserIdGetParams = {
n?: number;
limit?: number;
};

