/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  HTTPValidationError,
  LoginResponse,
  RefreshTokensRefreshPostParams,
  RegisterRegisterPostParams,
  UserLogin
} from '../fastAPI.schemas';

import { customInstance } from '../../custom-instance';
import type { ErrorType , BodyType } from '../../custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Register
 */
export const registerRegisterPost = (
    params: RegisterRegisterPostParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/register`, method: 'POST',
        params, signal
    },
      options);
    }
  


export const getRegisterRegisterPostMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerRegisterPost>>, TError,{params: RegisterRegisterPostParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof registerRegisterPost>>, TError,{params: RegisterRegisterPostParams}, TContext> => {
    
const mutationKey = ['registerRegisterPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerRegisterPost>>, {params: RegisterRegisterPostParams}> = (props) => {
          const {params} = props ?? {};

          return  registerRegisterPost(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegisterRegisterPostMutationResult = NonNullable<Awaited<ReturnType<typeof registerRegisterPost>>>
    
    export type RegisterRegisterPostMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Register
 */
export const useRegisterRegisterPost = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerRegisterPost>>, TError,{params: RegisterRegisterPostParams}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof registerRegisterPost>>,
        TError,
        {params: RegisterRegisterPostParams},
        TContext
      > => {

      const mutationOptions = getRegisterRegisterPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Login
 */
export const loginLoginPost = (
    userLogin: BodyType<UserLogin>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<LoginResponse>(
      {url: `/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userLogin, signal
    },
      options);
    }
  


export const getLoginLoginPostMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginLoginPost>>, TError,{data: BodyType<UserLogin>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof loginLoginPost>>, TError,{data: BodyType<UserLogin>}, TContext> => {
    
const mutationKey = ['loginLoginPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof loginLoginPost>>, {data: BodyType<UserLogin>}> = (props) => {
          const {data} = props ?? {};

          return  loginLoginPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LoginLoginPostMutationResult = NonNullable<Awaited<ReturnType<typeof loginLoginPost>>>
    export type LoginLoginPostMutationBody = BodyType<UserLogin>
    export type LoginLoginPostMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Login
 */
export const useLoginLoginPost = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginLoginPost>>, TError,{data: BodyType<UserLogin>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof loginLoginPost>>,
        TError,
        {data: BodyType<UserLogin>},
        TContext
      > => {

      const mutationOptions = getLoginLoginPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Refresh Tokens
 */
export const refreshTokensRefreshPost = (
    params: RefreshTokensRefreshPostParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/refresh`, method: 'POST',
        params, signal
    },
      options);
    }
  


export const getRefreshTokensRefreshPostMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof refreshTokensRefreshPost>>, TError,{params: RefreshTokensRefreshPostParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof refreshTokensRefreshPost>>, TError,{params: RefreshTokensRefreshPostParams}, TContext> => {
    
const mutationKey = ['refreshTokensRefreshPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof refreshTokensRefreshPost>>, {params: RefreshTokensRefreshPostParams}> = (props) => {
          const {params} = props ?? {};

          return  refreshTokensRefreshPost(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RefreshTokensRefreshPostMutationResult = NonNullable<Awaited<ReturnType<typeof refreshTokensRefreshPost>>>
    
    export type RefreshTokensRefreshPostMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary Refresh Tokens
 */
export const useRefreshTokensRefreshPost = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof refreshTokensRefreshPost>>, TError,{params: RefreshTokensRefreshPostParams}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof refreshTokensRefreshPost>>,
        TError,
        {params: RefreshTokensRefreshPostParams},
        TContext
      > => {

      const mutationOptions = getRefreshTokensRefreshPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get Access Token From Cookie
 */
export const getAccessTokenFromCookieTokenGet = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/token`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAccessTokenFromCookieTokenGetQueryKey = () => {
    return [`/token`] as const;
    }

    
export const getGetAccessTokenFromCookieTokenGetQueryOptions = <TData = Awaited<ReturnType<typeof getAccessTokenFromCookieTokenGet>>, TError = ErrorType<HTTPValidationError>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAccessTokenFromCookieTokenGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAccessTokenFromCookieTokenGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAccessTokenFromCookieTokenGet>>> = ({ signal }) => getAccessTokenFromCookieTokenGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAccessTokenFromCookieTokenGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAccessTokenFromCookieTokenGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAccessTokenFromCookieTokenGet>>>
export type GetAccessTokenFromCookieTokenGetQueryError = ErrorType<HTTPValidationError>


export function useGetAccessTokenFromCookieTokenGet<TData = Awaited<ReturnType<typeof getAccessTokenFromCookieTokenGet>>, TError = ErrorType<HTTPValidationError>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAccessTokenFromCookieTokenGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAccessTokenFromCookieTokenGet>>,
          TError,
          Awaited<ReturnType<typeof getAccessTokenFromCookieTokenGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAccessTokenFromCookieTokenGet<TData = Awaited<ReturnType<typeof getAccessTokenFromCookieTokenGet>>, TError = ErrorType<HTTPValidationError>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAccessTokenFromCookieTokenGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAccessTokenFromCookieTokenGet>>,
          TError,
          Awaited<ReturnType<typeof getAccessTokenFromCookieTokenGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAccessTokenFromCookieTokenGet<TData = Awaited<ReturnType<typeof getAccessTokenFromCookieTokenGet>>, TError = ErrorType<HTTPValidationError>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAccessTokenFromCookieTokenGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Access Token From Cookie
 */

export function useGetAccessTokenFromCookieTokenGet<TData = Awaited<ReturnType<typeof getAccessTokenFromCookieTokenGet>>, TError = ErrorType<HTTPValidationError>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAccessTokenFromCookieTokenGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAccessTokenFromCookieTokenGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



