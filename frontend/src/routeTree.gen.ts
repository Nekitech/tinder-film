/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as authLoginImport } from './routes/(auth)/login'
import { Route as appAppImport } from './routes/(app)/app'
import { Route as appAppRecommendationsImport } from './routes/(app)/app.recommendations'

// Create/Update Routes

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const appAppRoute = appAppImport.update({
  id: '/(app)/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const appAppRecommendationsRoute = appAppRecommendationsImport.update({
  id: '/recommendations',
  path: '/recommendations',
  getParentRoute: () => appAppRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(app)/app': {
      id: '/(app)/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof appAppImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/(app)/app/recommendations': {
      id: '/(app)/app/recommendations'
      path: '/recommendations'
      fullPath: '/app/recommendations'
      preLoaderRoute: typeof appAppRecommendationsImport
      parentRoute: typeof appAppImport
    }
  }
}

// Create and export the route tree

interface appAppRouteChildren {
  appAppRecommendationsRoute: typeof appAppRecommendationsRoute
}

const appAppRouteChildren: appAppRouteChildren = {
  appAppRecommendationsRoute: appAppRecommendationsRoute,
}

const appAppRouteWithChildren =
  appAppRoute._addFileChildren(appAppRouteChildren)

export interface FileRoutesByFullPath {
  '/app': typeof appAppRouteWithChildren
  '/login': typeof authLoginRoute
  '/app/recommendations': typeof appAppRecommendationsRoute
}

export interface FileRoutesByTo {
  '/app': typeof appAppRouteWithChildren
  '/login': typeof authLoginRoute
  '/app/recommendations': typeof appAppRecommendationsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(app)/app': typeof appAppRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(app)/app/recommendations': typeof appAppRecommendationsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/app' | '/login' | '/app/recommendations'
  fileRoutesByTo: FileRoutesByTo
  to: '/app' | '/login' | '/app/recommendations'
  id: '__root__' | '/(app)/app' | '/(auth)/login' | '/(app)/app/recommendations'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  appAppRoute: typeof appAppRouteWithChildren
  authLoginRoute: typeof authLoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  appAppRoute: appAppRouteWithChildren,
  authLoginRoute: authLoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(app)/app",
        "/(auth)/login"
      ]
    },
    "/(app)/app": {
      "filePath": "(app)/app.tsx",
      "children": [
        "/(app)/app/recommendations"
      ]
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(app)/app/recommendations": {
      "filePath": "(app)/app.recommendations.tsx",
      "parent": "/(app)/app"
    }
  }
}
ROUTE_MANIFEST_END */
